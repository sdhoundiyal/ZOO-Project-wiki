

=== Compilation ===
[[TOC()]]

This page provides documentation on how to compile then install ZOO-Kernel on Unix and Win32 platforms.

IMPORTANT: more detailed notes you can [http://zoo-project.org/docs/kernel/installation.html#kernel-installation find here].
==== Unix ====

For Unix users, ZOO-Kernel comes with a GNU autoconf "configure" script that
should take care of (hopefully!) all compilation issues for you.

The configure script won't work on Windows. See section [#WIN32 WIN32] for details on 
compiling on Windows systems.

==== For the impatient ====

ZOO requires a third party program, the CGI program.
To build <tt>zoo_loader.cgi</tt> CGI program with the default options, go to the default
options, go to the directory where you extracted the ZOO-Kernel source code 
package and use the following command:

<pre>
#sh
 $ cd thirds/cgic206
 $ make
 $ cd ../../zoo-project/zoo-kernel
 $ ./configure
 $ make
</pre>

Unless something went wrong, you should have executables in the current 
directory for the zoo_loader.cgi CGI program. You can copy the zoo_loader.cgi 
program and the main.cfg file to your HTTP server's CGI directory and start 
using it.

At this step your ZOO-Kernel should work. Nevertheless, don't forget to correct
the main.cfg settings to set tmpPath and tmpUrl to fit your web server
configuration.

==== configure options ====

Here is the list of available options as returned by <tt>./configure --help</tt>:
<pre>
#sh
  --with-gdal-config=FILE specify an alternative gdal-config file
  --with-xml2config=FILE  specify an alternative xml2-config file
  --with-python=PATH      To enabled python support or specify an alternative
                          directory for python installation, disabled by
                          default
  --with-php=PATH         To enabled php support or specify an alternative
                          directory for php installation, disabled by default
  --with-perl=PATH        To enabled perl support or specify an alternative
                          directory for perl installation, disabled by default
  --with-java=PATH        To enabled java support, specify a JDK_HOME,
                          disabled by default
  --with-js=PATH          specify --with-js=path-to-js to enabled js support,
                          specify --with-js on linux debian like, js support
                          is disabled by default
</pre>

All the options are described in more details below.

==== (Required) GDAL Support: ====

If your gdal-config program is not found in your PATH then you can use the 
"--with-gdal-config" option to speficy its location. For instance, let suppose
that your gdal-config was installed in /usr/local/bin and this directory is not
in your PATH, then you can use the following command:

<pre>
#sh
 $ ./configure --with-gdal-config=/usr/local/bin/gdal-config
</pre>

==== (Required) XML2 Support: ====

If your xml2-config program is not found in your PATH then you can use the
"--with-xml2config" option to specify its location. For instance, let suppose
that your xml2-config was installed in /usr/local/bin end this directory is not
in you PATH, then you can use the following command:

<pre>
#sh
 $ ./configure --with-xml2config=/usr/local/bin/xml2-config
</pre>

==== (Optional) Python Support ====


If you want to activate the Python Support for ZOO-Kernel then you will have to
use the "--with-python" option. If your python-config program is found in your
PATH then you don't have to specify the path where Python was installed, so 
using the following command:

<pre>
#sh
 $ ./configure --with-python
</pre>

This suppose that python-config is found in your PATH.

In case your python-config is not found in your PATH, then you can set the 
Python installation directory you are using. For instance, let suppose that you
installed Python in /usr/local, then you can use the following command:

<pre>
#sh
 $ ./configure --with-python=/usr/local
</pre>

This suppose that /usr/local/bin/python-config exists.
 
==== (Optional) PHP Support ====

To be able to activate PHP Support for ZOO-Kernel you'll need to get a local
PHP Embedded installation, for more informations about configure options to use
to get such kind of PHP installation you can refer to this page : 
               http://zoo-project.org/trac/wiki/ZooKernel/Embed/PHP 

If you want to activate the PHP Support for ZOO-Kernel then you will have to
use the "--with-php" option. If your php-config program is found in your PATH
then you don't have to specify the path where PHP was installed, so using the
following commnd: 

<pre>
#sh
 $ ./configure --with-php
</pre>

This suppose that php-config is found in your PATH.

In case your php-config is not found in your PATH, then you can set the PHP 
installation directory you are using. For instance, let suppose that you 
installed PHP in /usr/local, then you can use the following command: 

<pre>
#sh
 $ ./configure --with-php=/usr/local
</pre>

This suppose that /usr/local/bin/php-config exists.

==== (Optional) Perl Support ====


If you want to activate the Perl Support for ZOO-Kernel then you will have to
use the "--with-perl" option. If you do not set any value to this option, then
perl program will be searched in your PATH. So in such case, you can use the
following command:

<pre>
#sh
 $ ./configure --with-perl 
</pre>

This suppose that perl is found in your PATH.

In other case, for custom Perl installation, you can set the installation 
directory. For instance, let suppose that you installed Perl in /usr/local 
and /usr/local/bin is not in your PATH, then you can use the following command:

<pre>
#sh
 $ ./configure --with-perl=/usr/local
</pre>

This suppose that /usr/local/bin/perl exists.

==== (Optional) Java Support ====

If you want to activate the Java Support for ZOO-Kernel then you will have to
use the "--with-java" option and set the installation path of your Java SDK.
For instance, let suppose that your Java SDK was installed in 
/usr/lib/jvm/java-6-sun-1.6.0.22/ directory, then you can use the following 
command:

<pre>
#sh
 $ ./configure --with-java=/usr/lib/jvm/java-6-sun-1.6.0.22/
</pre>

This suppose that the include/linux and jre/lib/i386/client/ subdirectories 
exist in /usr/lib/jvm/java-6-sun-1.6.0.22/, include/linux contains the jni.h
headers file and jre/lib/i386/client/ contains the libjvm.so file. 

Note that on MacOS X you only have to set macos as value for the "--with-java" 
option to get the Java Support for ZOO-Kernel activated. So using the following
command:

<pre>
#sh
 $ ./configure --with-java=macos
</pre>

==== (Optional) JavaScript Support ====

If you want to activate the JavaScript Support for ZOO-Kernel then you will 
have to use the <tt>--with-js</tt> option. If you are using a "Debian-like" GNU/Linux 
distribution then dpkg will be used to detect if the required packages was 
installed and you don't have to specify anything here, so you can use the 
following command:

<pre>
#sh
 $ ./configure --with-js 
</pre>

This suppose that <tt>js_api.h</tt> and <tt>libmozjs.so</tt> are found in default directories.

If you get a custom installation of SpiderMonkey or you are not using a Debian
packaging system, then you'll have to specify the directory where you installed
it. For instance, let suppose that you installed your SpiderMonkey in <tt>/usr</tt>, 
then you'll have to use the following command:

<pre>
#sh
 $ ./configure --with-js=/usr
</pre>

This suppose that the <tt>/usr/include/js</tt> exists and contains the <tt>js_api.h</tt> headers 
file and <tt>/usr/lib</tt> contains <tt>libmozjs.so</tt> file.


==== WIN32 ====

==== Requirements ====

ZOO-Kernel on WIN32 platform requires the following for building: 

*OSGeo4W packages : Apache, gdal, Python
*libfcgi
*libcrypto, flex + bison (installed in a directory we call <tt>TPATH</tt>)

To be able to access flex and bison tools, you should use the following command :

<pre>
#sh
set TPATH=c:\My\Install\Directory
set PATH=%PATH%;%TPATH%\bin
</pre>

To make sure that environnement variables are correctly set for compilation, use the following command :

<pre>
#sh
c:\Program Files\Microsoft Visual Studio 9.0\VC\bin\vcvars32.bat
</pre>

==== libcgic ====

Make sure you get the file <tt>C:\OSGeo4W\lib\libfcgi.lib</tt> on your computer, then you can run the following commands to build the required libcgic:

<pre>
#sh
cd thirds/cgic206
make
</pre>

==== Build and deploy ZOO-Kernel ====

To build ZOO-Kernel you should first edit the nmake.opt file to set the following variables :

**<tt>LIBINTL_CPATH</tt>: the libintl installation path
**<tt>PYTHON_CPATH</tt>: the python installation path
**<tt>TPATH</tt>: discussed [#Requirements before]
**<tt>GEODIR</tt>: OSGeo4W installation path
**<tt>CFLAGS</tt>: flags used at compilation time
**<tt>LDFLAGS</tt>: flags used at link time

Then, run the following commands to build your own WIN32 ZOO-Kernel:

<pre>
#sh
cd zoo-kernel
nmake /f makefile.vc
</pre>

To make sure your build can run you need to copy it in the bin directory from the OSGeo4W installation path, then try to run it from command line: 

<pre>
#sh
copy zoo_loader.cgi main.cfg c:\OSGeo4W\bin
cd c:\OSGeo4W\bin
.\zoo_loader.cgi "request=GetCapabilities&service=WPS"
</pre>

If everything went right running from command line, then you can run it from your browser and build services.

==== Build and deploy ServicesProvider ====

Actually only few ServiceProvider was tested on WIN32 platform. To compile a service provider called SP you should run the following commands: 

<pre>
#sh
cd zoo-service\SP
nmake /f makefile.vc
</pre>

As this <tt>makefile.vc</tt> uses <tt>nmake.opt</tt> you modified earlier, it should succeed.

Now you just need to copy files from the <tt>cgi-env</tt> directory into <tt>c:\OSGeo4W\bin</tt> to deploy your ServiceProvider (should contain at least a <tt>.zo</tt> and a <tt>.zcfg</tt>).








